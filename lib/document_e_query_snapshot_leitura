Document & Query Snapshots#
When performing a query, Firestore returns either a QuerySnapshot or a DocumentSnapshot.

APARENTEMENTE O QUERYSNAPSHOT E PARA BUSCAR TUDO Q TA NA COLECAO/COLLECTION

QuerySnapshot#
A QuerySnapshot is returned from a collection query, and allows you to inspect the collection, such as how many documents exist within it, gives access to the documents within the collection, see any changes since the last query and more.

To access the documents within a QuerySnapshot, call the docs property, which returns a List containing DocumentSnapshot classes.


###
FirebaseFirestore.instance
    .collection('users')
    .get()
    .then((QuerySnapshot querySnapshot) {
        querySnapshot.docs.forEach((doc) {
            print(doc["first_name"]);
        });
    });


####

APARENTEMENTE COM O DOCUMENT SNAPSHOT A BAIXO CONSEGUIMOS
FAZER BUSCAS DENTRO DE UM DOCUMENTO ESPECIFICO...
TIPO BUSCAR TODOS NOMES DENTRO DO DOCUMENTO USUARIOS

DocumentSnapshot#
A DocumentSnapshot is returned from a query, or by accessing the document directly. Even if no document exists in the database, a snapshot will always be returned.

To determine whether the document exists, use the exists property:

###

FirebaseFirestore.instance
    .collection('users')
    .doc(userId)
    .get()
    .then((DocumentSnapshot documentSnapshot) {
      if (documentSnapshot.exists) {
        print('Document exists on the database');
      }
    });

  ###


If the document exists, you can read the data of it by calling the data method, which returns a Map<String, dynamic>, or null if it does not exist:

FirebaseFirestore.instance
    .collection('users')
    .doc(userId)
    .get()
    .then((DocumentSnapshot documentSnapshot) {
      if (documentSnapshot.exists) {
        print('Document data: ${documentSnapshot.data()}');
      } else {
        print('Document does not exist on the database');
      }
    });


    ###



A DocumentSnapshot also provides the ability to access deeply nested data without manually iterating the returned Map via the get method. The method accepts a dot-separated path or a FieldPath instance. If no data exists at the nested path, a StateError:

try {
  dynamic nested = snapshot.get(FieldPath(['address', 'postcode']));
} on StateError catch(e) {
  print('No nested field exists!');
}